$baseColors: (
  red: #f44336,
  pink: #e91e63,
  purple: #9c27b0,
  deep-purple: #673ab7,
  indigo: #3f51b5,
  blue: #2196f3,
  light-blue: #03a9f4,
  cyan: #00bcd4,
  teal: #009688,
  green: #4caf50,
  light-green: #8bc34a,
  lime: #cddc39,
  yellow: #ffeb3b,
  amber: #ffc107,
  orange: #ff9800,
  deep-orange: #ff5722,
  brown: #795548,
  grey: #9e9e9e,
  blue-grey: #607d8b,
  black: black,
  white: white,
  fulll: #5b3fb8,
  blue-sky: #328ce4,
  malachite: #35ad57,
  grenadine: #f74235,
  sapphire: #0055d3,
  duck-green: #27a39e,
  kiwi: #aec82e,
  coral: #fe4e0f,
  golden-straw: #fddf44,
);

@function colorMap($baseColors, $variations) {
  $colors: ();

  @each $color, $value in $baseColors {
    $maxVar: 36;
    $mid: $variations / 2;
    $dist: $mid - 1;
    $step: $maxVar / $dist;

    // lighten and darken
    @for $i from 1 through $dist {
      $percent: $maxVar - ($step * ($i - 1));
      $darken: ($variations - $i) * 100;
      $lighten: $i * 100;

      $colors: map-merge(
        $colors,
        (
          #{$color}: $value,
          #{$color}-#{$lighten}: lighten($value, $percent),
          #{$color}-#{$darken}: darken($value, $percent)
        )
      );
    }

    // middle eg 500
    $colors: map-merge($colors, (#{$color}-50: lighten($value, 38.7)));
    $colors: map-merge($colors, (#{$color}-#{$variations/2 * 100}: $value));
  }
  @return $colors;
}

@each $color, $value in colorMap($baseColors, 10) {
  .#{$color} {
    background-color: $value;
  }
}

@each $color, $value in colorMap($baseColors, 10) {
  .text--#{$color} {
    color: $value;
  }
}

.transparent {
  background-color: transparent;
}
